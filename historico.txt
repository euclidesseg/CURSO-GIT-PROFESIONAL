----$touch historico.txt                                    = crear un archivo
----$ git rm --cached historico.txt                         = para regresar los cambios despues de add
----$ git commit -m "este es el primer commit"              = agregar al repositorios
----$ git config --global user.name "Euclides Perez"        = cambiar la configuracion de nombre de usuario
----$ git config --global uer.email "eperez@intecol.com.co" = cambiar la configuracion de correo de usuario
----$ git branch                = ver todas las ramas disponibles 
----$ git branch -D <nombre_de_rama>                        = eliminar una rama 
----$ code historico.txt        = abrir un archivo en code
----$ git log historio.txt      = ver el historico de un archivo me indica HEAD que es el estado actual
----$ git show historico.txt    = ver mas detalles de un archivo  
----$ git reset 32e88fcab27b48adcb5f86f0756a7fb6c1c7f5de --hard = para regresar a una vesion anterior el
----$ git reset --soft 48ec7f9f978e0f17c994e3b1732124c84cd645f1 me devuelve al cambio indicado en el id pero me deja en el state los git posteriores
----$ git reflog para ver incuso los commit  eliminados ideal para recuperar cambios eliminados
----$ git reset --hard fe7fe56 para recuperar un commit eliminado
----$ es decir como si le hubiese dado git add .
------numero largo es la version obtenida con git log


        1. `git commit -a`: Prepara automáticamente los archivos en el área de preparación.
        2. `git log -p`: Produce texto de parche.
        3. `git show`: Muestra varios objetos.
        4. `git diff`: Similar al comando `diff` en Linux, muestra diferencias entre confirmaciones.
        5. `git diff --staged`: Un alias para `--cached`, muestra todos los archivos en el área de preparación en comparación con la confirmación         nombrada.
        6. `git add -p`: Permite a un usuario revisar parches de forma interactiva para prepararlos en la confirmación actual.
        7. `git mv`: Similar al comando `mv` en Linux, mueve un archivo.
        8. `git rm`: Similar al comando `rm` en Linux, borra o elimina un archivo.
        9.   `git revert`: Similar al comando `revert` en Linux, revierte un commit y crea uno nuevo ignorando los cambios del anterior no                      elimina ya que el cambio anterior sigue estando en el historial de commits.

        RAMAS DE FUNCION FEATURE
----- Todas las funciones nuevas deben residir en su propia rama, 
----- que se puede enviar al repositorio central para copia de seguridad. 
----- Sin embargo, en lugar de ramificarse de main, las ramas feature utilizan
----- la rama develop como rama primaria. 
----- Cuando una función está terminada, se vuelve a fusionar en develop. 
----- Las funciones no deben interactuar nunca directamente con main.


----$ git branch -nombre de la rama-:    = Con este comando se genera una nueva rama. 
----$ git checkout -nombre de la rama-:  = Con este comando puedes saltar de una rama a otra. 
----$ git checkout -b rama:  = Genera una rama y nos mueve a ella automáticamente, Es decir, es la combinación de git brach y git checkout al mismo tiempo. 
----$ git reset id-commit:  = Nos lleva a cualquier commit no importa la rama, ya que identificamos el id del tag., eliminando el historial de los commit posteriores al tag seleccionado. 
----$ git checkout rama-o-id-commit:  = Nos lleva a cualquier commit sin borrar los commit posteriores al tag seleccionado.
----$ git merge feature1       = Nos permite fusionar una rama de funcion con la rama develop tambien fusionar develop con la rama master
----- intentando subi cambios a la rama develop
----- intentando subir camnios a la fusion feature 1

----- Para fusionar una rama con otra primero nos paramos en la rama en la que queremos agregar los cambios de otra rama 
----- Con git checkout y luego si hacemos el merge

        RAMAS DE PUBLICACION O RELEASE
---- Cuando develop haya adquirido suficientes funciones para una publicación 
---- (o se acerque una fecha de publicación predeterminada), debes bifurcar una rama release 
---- a partir de develop. Al crear esta rama, se inicia el siguiente ciclo de publicación, 
---- por lo que no pueden añadirse nuevas funciones una vez pasado este punto 
---- (en esta rama solo deben producirse las soluciones de errores, la generación de documentación y 
---- otras tareas orientadas a la publicación). Cuando está lista para el lanzamiento, 
---- la rama release se fusiona en main y se etiqueta con un número de versión. 
---- Además, debería volver a fusionarse en develop, ya que esta podría haber progresado desde 
---- que se iniciara la publicación.
---- estas ramas siempre se crean como una funcion en la rama de develop y solo cuando develop ya tiene todas sus funciones 
---- o features

----- En cuanto la publicación esté lista para su lanzamiento, 
----- se fusionará en las ramas main y develop, y luego se eliminará la rama release.

        RAMAS DE CORRECCION HOTFIX
----- Las ramas de mantenimiento, de corrección o de hotfix sirven para reparar rápidamente las publicaciones de producción. 
----- Las ramas hotfix son muy similares a las ramas release y feature, 
----- salvo por el hecho de que se basan en la rama main y no en la develop

----$ git checkout master = me lleva a la rama master
----$ git checkout -b hotfix_branch = me crea el otifix a partir de la rama master

----- Al igual que al finalizar una rama release, 
----- una rama hotfix se fusiona tanto en master como en develop y luego se elimina
----- para posteriormente publicar la rama master


        RESUMEN

        El flujo general de Gitflow es el siguiente:

        Se crea una rama develop a partir de Master.
        Se crea una rama release a partir de la develop.
        Se crean ramas feature a partir de la develop.
        Cuando se termina una rama feature, se fusiona en la rama develop.
        Cuando la rama release está lista, se fusiona en las ramas develop y main.
        Si se detecta un problema en main, se crea una rama hotfix a partir de main.
        Una vez terminada la rama hotfix, esta se fusiona tanto en develop como en main
